import logging
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from api_client import SYSTEM_PROMPT, call_ai
from core import settings

router = Router()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ChatStates(StatesGroup):
    chatting = State()  # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    waiting_for_contact = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –∑–∞—è–≤–∫–∏


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI ---
async def send_ai_response(message: Message, text: str, buttons: list):
    builder = InlineKeyboardBuilder()
    for button_text in buttons:
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
        callback_data = "leave_application" if "–∑–∞—è–≤–∫—É" in button_text.lower() else button_text
        builder.add(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    builder.adjust(1)

    await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")


# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await state.set_state(ChatStates.chatting)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ä–∞–∑—É –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ AI –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    history = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": "/start"}
    ]

    data = await call_ai(user_id, history)
    reply_text = data.get("reply", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã")
    buttons = data.get("buttons", [])

    history.append({"role": "assistant", "content": reply_text})
    await state.update_data(history=history)

    await send_ai_response(message, reply_text, buttons)


@router.callback_query(F.data == "leave_application")
async def form_start_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        'üìã –ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É, –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username. –ú—ã —Å–≤—è–∂–µ–º—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.'
    )
    await state.set_state(ChatStates.waiting_for_contact)
    await callback.answer()


@router.message(ChatStates.waiting_for_contact)
async def form_data_handler(message: Message, state: FSMContext, bot: Bot):
    contact_info = message.text
    user_info = f"@{message.from_user.username}" if message.from_user.username else f"ID: {message.from_user.id}"

    await message.answer(
        f'–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç ¬´{contact_info}¬ª –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. ‚úÖ'
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(
        chat_id=settings.telegram_id,
        text=f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: {contact_info}"
    )
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–ª–æ–≥
    await state.set_state(ChatStates.chatting)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(ChatStates.chatting)
async def handle_text_message(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_text = message.text

    fsm_data = await state.get_data()
    history = fsm_data.get("history", [])

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞
    if not history:
        history = [{"role": "system", "content": SYSTEM_PROMPT}]

    history.append({"role": "user", "content": user_text})

    data = await call_ai(user_id, history)
    reply_text = data.get("reply", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    buttons = data.get("buttons", [])

    history.append({"role": "assistant", "content": reply_text})
    await state.update_data(history=history)

    await send_ai_response(message, reply_text, buttons)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ Inline-–∫–Ω–æ–ø–∫–∏
@router.callback_query(ChatStates.chatting)
async def handle_callback_query(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    button_text = callback.data  # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è "—Å–æ–æ–±—â–µ–Ω–∏–µ–º" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback.answer()

    fsm_data = await state.get_data()
    history = fsm_data.get("history", [])

    if not history:
        history = [{"role": "system", "content": SYSTEM_PROMPT}]

    history.append({"role": "user", "content": button_text})

    data = await call_ai(user_id, history)
    reply_text = data.get("reply", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    buttons = data.get("buttons", [])

    history.append({"role": "assistant", "content": reply_text})
    await state.update_data(history=history)

    await send_ai_response(callback.message, reply_text, buttons)