import time
from typing import Callable, Awaitable, Any, Dict

from aiogram import BaseMiddleware
from aiogram.types import Update, Message
from redis.asyncio.client import Redis

from core import settings

# === –ö–æ–Ω—Ñ–∏–≥ ===
ADMIN_ID = settings.telegram_id
MIN_INTERVAL = 1.0  # –ú–∏–Ω–∏–º—É–º —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
DAILY_LIMIT = 200  # –°–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
COOLDOWN_AFTER_LIMIT = 180  # –°–µ–∫—É–Ω–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞


class AntiFloodMiddleware(BaseMiddleware):
    async def __call__(
            self,
            handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
            event: Update,
            data: Dict[str, Any],
    ) -> Any:
        message: Message | None = getattr(event, "message", None) or getattr(event, "callback_query", None)
        if not message:
            return await handler(event, data)

        user_id = message.from_user.id
        if user_id == ADMIN_ID:
            return await handler(event, data)

        redis: Redis = data["redis_client"]

        # –ö–ª—é—á–∏ –¥–ª—è Redis
        key_last_time = f"antiflood:last_time:{user_id}"
        key_daily_count = f"antiflood:daily_count:{user_id}"
        key_cooldown = f"antiflood:cooldown:{user_id}"

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ cooldown
        if await redis.get(key_cooldown):
            if isinstance(message, Message):
                await message.answer("üìµ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç ‚è≥")
            return

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        last_time = await redis.get(key_last_time)
        if last_time and time.time() - float(last_time) < MIN_INTERVAL:
            if isinstance(message, Message):
                await message.answer("‚è± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ üôè")
            return

        await redis.set(key_last_time, time.time(), ex=int(MIN_INTERVAL) + 1)

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        daily_count_raw = await redis.get(key_daily_count)
        daily_count = int(daily_count_raw) if daily_count_raw else 0

        if daily_count >= DAILY_LIMIT:
            await redis.set(key_cooldown, 1, ex=COOLDOWN_AFTER_LIMIT)
            if isinstance(message, Message):
                await message.answer("üìµ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç ‚è≥")
            return

        # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ TTL –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
        p = redis.pipeline()
        p.incr(key_daily_count)
        if daily_count == 0:
            # TTL –¥–æ –ø–æ–ª—É–Ω–æ—á–∏
            seconds_until_midnight = 86400 - (int(time.time()) % 86400)
            p.expire(key_daily_count, seconds_until_midnight)
        await p.execute()

        return await handler(event, data)