import time
import logging
from typing import Callable, Awaitable, Any, Dict

from aiogram import BaseMiddleware
from aiogram.types import Update, Message

from core import settings

# === –ö–æ–Ω—Ñ–∏–≥ ===
ADMIN_ID = settings.telegram_id        # —Å—é–¥–∞ –ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram ID
MIN_INTERVAL = 1.0          # –º–∏–Ω–∏–º—É–º —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
DAILY_LIMIT = 200           # —Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
COOLDOWN_AFTER_LIMIT = 180  # —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∂–¥–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞

# user_id -> { "last_time": float, "count": int, "day": str }
user_limits: dict[int, dict] = {}


class AntiFloodMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any],
    ) -> Any:
        message: Message | None = getattr(event, "message", None)
        if not message:
            return await handler(event, data)

        user_id = message.from_user.id
        now = time.time()
        day = time.strftime("%Y-%m-%d")

        # –ê–¥–º–∏–Ω –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        if user_id == ADMIN_ID:
            return await handler(event, data)

        stats = user_limits.setdefault(user_id, {"last_time": 0.0, "count": 0, "day": day})

        # –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –≤ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        if stats["day"] != day:
            stats["day"] = day
            stats["count"] = 0

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        if now - stats["last_time"] < MIN_INTERVAL:
            await message.answer("‚è± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ üôè")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        if stats["count"] >= DAILY_LIMIT:
            if now - stats["last_time"] < COOLDOWN_AFTER_LIMIT:
                await message.answer("üìµ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ ‚è≥")
                return
            else:
                stats["count"] = DAILY_LIMIT  # –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–æ –∂–¥—ë–º cooldown

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats["last_time"] = now
        stats["count"] += 1
        user_limits[user_id] = stats

        return await handler(event, data)
