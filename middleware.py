# file: middleware.py

import time
import logging
from typing import Callable, Awaitable, Any, Dict

from aiogram import BaseMiddleware
from aiogram.types import Update, Message

from core import settings

# --- –ö–æ–Ω—Ñ–∏–≥ ---
ADMIN_ID = settings.telegram_id
MIN_INTERVAL = 1.0  # –º–∏–Ω–∏–º—É–º —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
DAILY_LIMIT = 200  # —Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
COOLDOWN_AFTER_LIMIT = 180  # —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∂–¥–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞

# user_id -> { "last_time": float, "daily_count": int, "day_timestamp": str }
user_limits: dict[int, dict] = {}


class AntiFloodMiddleware(BaseMiddleware):
    async def __call__(
            self,
            handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
            event: Update,
            data: Dict[str, Any],
    ) -> Any:
        message: Message | None = getattr(event, "message", None) or getattr(event, "callback_query", None)
        if not message:
            return await handler(event, data)

        user_id = message.from_user.id
        if user_id == ADMIN_ID:
            return await handler(event, data)

        now = time.time()
        today = time.strftime("%Y-%-m-%d")

        user_stats = user_limits.setdefault(user_id, {
            "last_time": 0.0,
            "daily_count": 0,
            "day_timestamp": "1970-01-01"
        })

        if user_stats["day_timestamp"] != today:
            user_stats["day_timestamp"] = today
            user_stats["daily_count"] = 0

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –≠–¢–û –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï.
        if now - user_stats["last_time"] < MIN_INTERVAL:
            if isinstance(message, Message):
                await message.answer("‚è± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ üôè")
            return

        # –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –±—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        user_stats["last_time"] = now

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        if user_stats["daily_count"] >= DAILY_LIMIT:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º now, —Ç–∞–∫ –∫–∞–∫ last_time —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
            if now - user_stats["last_time"] < COOLDOWN_AFTER_LIMIT and user_stats["daily_count"] > DAILY_LIMIT:
                if isinstance(message, Message):
                    await message.answer("üìµ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ ‚è≥")
                return

        # –í—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        result = await handler(event, data)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        user_stats["daily_count"] += 1

        return result